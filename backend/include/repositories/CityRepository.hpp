/**
 * @file CityRepository.hpp
 * @brief Repository class for City entity database operations
 */

 #ifndef CITY_REPOSITORY_HPP
 #define CITY_REPOSITORY_HPP
 
 #include "../header.hpp"
 #include "../entities/City.hpp"
 
 /**
  * @class CityRepository
  * @brief Handles all database operations for City entities
  * 
  * The CityRepository class provides methods to interact with the database
  * for City entities. It handles CRUD operations and data mapping between
  * database rows and City objects.
  */
 class CityRepository {
 private:
     DatabaseManager& database;  ///< Reference to database connection for SQL queries
 
 public:
     /**
      * @brief Constructor
      * @param db Reference to DatabaseManager instance
      * 
      * Initializes the repository with a database connection.
      */
     CityRepository(DatabaseManager& db);
 
     /**
      * @brief Retrieve all cities from the database
      * @return Vector containing all City objects from the database
      * 
      * Executes a SELECT query to fetch all cities and converts
      * the results into City objects.
      */
     V<City> findAll();
 
     // Admin methods for database modifications
     /**
      * @brief Insert a new city into the database
      * @param city The City object to insert
      * @return True if insertion successful, false otherwise
      * 
      * Adds a new city record to the database. The city ID should
      * be auto-generated by the database.
      */
     bool insert(const City& city);
     
     /**
      * @brief Update an existing city in the database
      * @param city The City object with updated information
      * @return True if update successful, false otherwise
      * 
      * Modifies an existing city record based on the city's ID.
      */
     bool update(const City& city);
     
     /**
      * @brief Delete a city from the database by ID
      * @param cityId The ID of the city to delete
      * @return True if deletion successful, false otherwise
      * 
      * Removes a city record from the database using its unique ID.
      */
     bool deleteById(int cityId);
     
     /**
      * @brief Find a specific city by its ID
      * @param cityId The ID of the city to find
      * @return Pointer to City object if found, nullptr otherwise
      * 
      * Searches for a city with the specified ID and returns
      * a pointer to the City object if found.
      */
     City* findById(int cityId);
 
 private:
     /**
      * @brief Convert database row to City object
      * @param row Vector of strings representing a database row
      * @return City object created from the row data
      * 
      * Maps a database row (vector of strings) to a City object.
      * This is a helper method used internally by other repository methods.
      */
     City mapRowToEntity(const std::vector<std::string>& row);
 };
 
 #endif