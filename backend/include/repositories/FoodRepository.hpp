/**
 * @file FoodRepository.hpp
 * @brief Repository class for Food entity database operations
 */

 #ifndef FOOD_REPOSITORY_HPP
 #define FOOD_REPOSITORY_HPP
 
 #include "../header.hpp"
 #include "../entities/Food.hpp"
 
 /**
  * @class FoodRepository
  * @brief Handles all database operations for Food entities
  * 
  * The FoodRepository class provides methods to interact with the database
  * for Food entities. It handles CRUD operations and data mapping between
  * database rows and Food objects.
  */
 class FoodRepository {
 private:
     DatabaseManager& database;  ///< Reference to database connection for SQL queries
 
 public:
     /**
      * @brief Constructor
      * @param db Reference to DatabaseManager instance
      * 
      * Initializes the repository with a database connection.
      */
     FoodRepository(DatabaseManager& db);
 
     /**
      * @brief Retrieve all foods from the database
      * @return Vector containing all Food objects from the database
      * 
      * Executes a SELECT query to fetch all foods and converts
      * the results into Food objects.
      */
     V<Food> findAll();
 
     /**
      * @brief Find foods by city ID
      * @param cityId The ID of the city to search for
      * @return Vector containing Food objects for the specified city
      * 
      * Retrieves all foods associated with a specific city.
      */
     V<Food> findByCityId(int cityId);
 
     // Admin methods for database modifications
     /**
      * @brief Insert a new food into the database
      * @param food The Food object to insert
      * @return True if insertion successful, false otherwise
      * 
      * Adds a new food record to the database. The food ID should
      * be auto-generated by the database.
      */
     bool insert(const Food& food);
     
     /**
      * @brief Update an existing food in the database
      * @param food The Food object with updated information
      * @return True if update successful, false otherwise
      * 
      * Modifies an existing food record based on the food's ID.
      */
     bool update(const Food& food);
     
     /**
      * @brief Delete a food from the database by ID
      * @param foodId The ID of the food to delete
      * @return True if deletion successful, false otherwise
      * 
      * Removes a food record from the database using its unique ID.
      */
     bool deleteById(int foodId);
     
     /**
      * @brief Find a specific food by its ID
      * @param foodId The ID of the food to find
      * @return Pointer to Food object if found, nullptr otherwise
      * 
      * Searches for a food with the specified ID and returns
      * a pointer to the Food object if found.
      */
     Food* findById(int foodId);
 
 private:
     /**
      * @brief Convert database row to Food object
      * @param row Vector of strings representing a database row
      * @return Food object created from the row data
      * 
      * Maps a database row (vector of strings) to a Food object.
      * This is a helper method used internally by other repository methods.
      */
     Food mapRowToEntity(const std::vector<std::string>& row);
 };
 
 #endif